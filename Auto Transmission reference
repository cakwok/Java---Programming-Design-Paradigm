import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

interface Transmission {
public Transmission increaseSpeed();

public Transmission decreaseSpeed();

public int getGear();

public int getCurrentSpeed();
}

class AutomaticTransmission implements Transmission {

private static int speed[];
private int currentSpeed;
private int gear;

public AutomaticTransmission(int s1, int s2, int s3, int s4, int s5) {
if (s1 <= 0 || s2 <= s1 || s3 <= s2 || s4 <= s3 || s5 <= s4) {
throw new IllegalArgumentException();
}
speed = new int[] { s1, s2, s3, s4, s5 };
currentSpeed = 0;
gear = 1;
}

private void resetGear() {
gear = 1;
for (int i = 0; i < 5; i++) {
if (currentSpeed >= speed[i]) {
gear++;
}
}
}

public Transmission increaseSpeed() {
currentSpeed += 2;
resetGear();
return this;
}

public Transmission decreaseSpeed() {
if (currentSpeed < 2) {
throw new IllegalArgumentException();
}
currentSpeed -= 2;
resetGear();
return this;
}

@Override
public String toString() {
return "Transmission (speed = " + currentSpeed + ", gear = " + gear + ")";
}

public int getCurrentSpeed() {
return currentSpeed;
}

public int getGear() {
return gear;
}
}

class AutomaticTransmissionTest {

@Test
void test1() {
AutomaticTransmission at = new AutomaticTransmission(4, 8, 10, 12, 17);
assertEquals(0, at.getCurrentSpeed());
assertEquals(1, at.getGear());

at.increaseSpeed();
assertEquals(2, at.getCurrentSpeed());
assertEquals(1, at.getGear());

at.increaseSpeed();
assertEquals(4, at.getCurrentSpeed());
assertEquals(2, at.getGear());

at.increaseSpeed().increaseSpeed();
assertEquals(8, at.getCurrentSpeed());
assertEquals(3, at.getGear());

at.decreaseSpeed();
assertEquals(6, at.getCurrentSpeed());
assertEquals(2, at.getGear());
}

@Test
void test2() {
assertThrows(IllegalArgumentException.class, () -> new AutomaticTransmission(-4, 8, 10, 12, 17));
assertThrows(IllegalArgumentException.class, () -> new AutomaticTransmission(4, 8, -10, 12, 17));
assertThrows(IllegalArgumentException.class, () -> new AutomaticTransmission(4, 4, 10, 12, 17));
assertThrows(IllegalArgumentException.class, () -> new AutomaticTransmission(4, 2, 17, 12, 17));
assertThrows(IllegalArgumentException.class, () -> new AutomaticTransmission(4, 4, 4, 4, 4));
}

@Test
void test3() {
AutomaticTransmission at = new AutomaticTransmission(4, 8, 10, 12, 17);
assertEquals("Transmission (speed = 0, gear = 1)", at.toString());
at.increaseSpeed().increaseSpeed().increaseSpeed().increaseSpeed().increaseSpeed();
assertEquals("Transmission (speed = 10, gear = 4)", at.toString());
}

}

